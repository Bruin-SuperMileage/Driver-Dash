{"version":3,"sources":["firebase.js","config.js","components/speed.js","components/lap.js","components/time.js","components/speedometer.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","firebase","initializeApp","Speed","classNAme","className","this","props","speed","React","Component","Lap","lap","Speedometer","minValue","maxValue","needleHeightRatio","maxSegmentLabels","segments","value","speedometer","textColor","width","height","needleTransition","ringWidth","paddingVertical","valueTextFontSize","labelFontSize","paddingHorizontal","App","state","latestTime","latestTrial","latestData","battery","driver","time","database","ref","on","snapshot","latestTime1","val","console","log","latestTrial1","child","latestData1","setState","class","style","paddingTop","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+RAMIA,EAAS,CAEXC,OCRiB,0CDSjBC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,sBAGjBC,IAASC,cAAcP,GAERM,QAAf,EEFeE,G,uLAXP,OACE,yBAAKC,UAAU,WACV,yBAAKC,UAAU,UACV,uBAAGA,UAAY,+BAA+BC,KAAKC,MAAMC,MAAMA,OAC/D,uBAAGH,UAAY,8BAAf,c,GANAI,IAAMC,YCiBXC,GCjBIF,IAAMC,U,iLDGjB,OACE,6BACE,yBAAKL,UAAU,OACX,yBAAKA,UAAU,gBACX,uBAAGA,UAAU,qBAAb,gBAA+CC,KAAKC,MAAMK,IAAX,SAC/C,uBAAGP,UAAU,qBAAb,qBAAoDC,KAAKC,MAAMK,IAAX,kB,GARtDH,IAAMC,Y,iBE6BTG,E,iLA1BP,OACE,yBAAKR,UAAU,WACV,yBAAKA,UAAU,4BACd,kBAAC,IAAD,CACIS,SAAU,EACVC,SAAU,GACVC,kBAAmB,GACnBC,iBAAkB,EAClBC,SAAU,KACVC,MAAOb,KAAKC,MAAMa,YAAYZ,MAC9Ba,UAAW,QACXC,MAAO,IACPC,OAAQ,IACRC,iBAAkB,aAClBC,UAAW,IACXC,gBAAiB,IACjBC,kBAAmB,EACnBC,cAAe,GACfC,kBAAmB,Y,GApBbpB,IAAMC,WCoFjBoB,E,YAzEb,WAAYvB,GAAO,IAAD,8BAChB,4CAAMA,KAEDwB,MAAQ,CACXC,WAAY,GACZC,YAAa,GACbC,WAAY,GACZC,QAAS,GACTC,OAAQ,GACRxB,IAAK,GACLJ,MAAO,GACPY,YAAa,GACbiB,KAAM,IAZQ,E,iFAgBG,IAAD,OACdC,EAAWrC,EAASqC,WAGxBA,EAASC,IAAI,eAAeC,GAAG,SAAS,SAACC,GACvC,IAAIC,EAAcD,EAASE,MACzBC,QAAQC,IAAIH,GAEdJ,EAASC,IAAI,gBAAgBC,GAAG,SAAS,SAACC,GACxC,IAAIK,EAAeL,EAASE,MAC1BC,QAAQC,IAAIC,GAGdR,EAASC,IAAIO,GAAcC,MAAML,GAAaF,GAAG,SAAS,SAACC,GACzD,IAAIO,EAEAxC,GADJwC,EAAcP,EAASE,OACA,MACnB/B,EAAMoC,EAAW,IACHA,EAAW,MAE7B,EAAKC,SAAS,CACZf,WAAYc,EACZxC,MAAOA,EACPY,YAAaZ,EACbI,IAAKA,OAIT,EAAKqC,SAAS,CACZhB,YAAaa,OAIjB,EAAKG,SAAS,CACZjB,WAAYU,S,+BAMhB,OACE,yBAAKQ,MAAM,oBAAoBC,MAAO,CAACC,WAAY,SACjD,yBAAKF,MAAM,wBACT,yBAAKA,MAAM,uBACT,kBAAC,EAAD,CAAO1C,MAAOF,KAAKyB,MAAMvB,SAE3B,yBAAK0C,MAAM,WAET,kBAAC,EAAD,CAAa9B,YAAad,KAAKyB,MAAMvB,QACrC,kBAAC,EAAD,CAAKI,IAAKN,KAAKyB,MAAMnB,a,GAlEfH,IAAMC,WCDJ2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4a7d88b4.chunk.js","sourcesContent":["import {apiKeyHidden} from './config';\nimport firebase from 'firebase';\n\n// Set the configuration for your app\n// TODO: Replace with your project's config object\n\nvar config = {\n  // apiKey: \"AIzaSyAnFTWZTgWEugKOSUM6WY_NkxrPzRzn6dU\",\n  apiKey: apiKeyHidden,\n  authDomain: \"bruin-racing.firebaseapp.com\",\n  databaseURL: \"https://bruin-racing.firebaseio.com\",\n  projectId: \"bruin-racing\",\n  storageBucket: \"bucket.appspot.com\"\n};\n\nfirebase.initializeApp(config);\n\nexport default firebase;","var apiKeyHidden = \"AIzaSyAnFTWZTgWEugKOSUM6WY_NkxrPzRzn6dU\";\r\nvar weatherApiKeyHidden = \"c296262e1b79e2cb0b0b13e4568be2e9\";\r\nexport {apiKeyHidden, weatherApiKeyHidden};","import React from 'react';\n\nclass Speed extends React.Component{\n    render() {\n        return (\n          <div classNAme=\"columns\">\n               <div className=\"column\">\n                    <p className = \"speed has-text-centered big\">{this.props.speed.speed}</p>\n                    <p className = \"speed has-text-centered km\">km/h</p>\n               </div>\n          </div>\n        );\n     }\n};\n\nexport default Speed;","import React from 'react';\r\n\r\nclass Lap extends React.Component{\r\n\r\n    render() {\r\n        return (\r\n          <div>\r\n            <div className=\"lap\">\r\n                <div className=\"card-content\">\r\n                    <p className=\"has-text-centered\">Current Lap: {this.props.lap[\"current\"]}</p>\r\n                    <p className=\"has-text-centered\">Current Lap Time: {this.props.lap[\"remaining\"]}</p>\r\n                </div>\r\n            </div>\r\n          </div>\r\n        );\r\n     }\r\n};\r\n\r\n     \r\nexport default Lap;","import React from 'react';\r\n\r\nclass Time extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      time: \"\",\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    var endString = \" AM\";\r\n    var today = new Date();\r\n    var hours = today.getHours();\r\n    if (hours > 12) {\r\n    hours -= 12;\r\n    endString = \" PM\";\r\n    };\r\n    var time1 = hours + \":\" + today.getMinutes() + \":\" + today.getSeconds() + endString;\r\n    \r\n    this.setState({\r\n    time: time1,\r\n    })\r\n}\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"columns\">\r\n                <div className = \"column\">\r\n                    {this.state.time}\r\n                </div> \r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Time;","import React from 'react';\r\nimport ReactSpeedometer from \"react-d3-speedometer\"\r\n\r\nclass Speedometer extends React.Component{\r\n    render() {\r\n        return (\r\n          <div className=\"columns\">\r\n               <div className=\"column has-text-centered\">\r\n                <ReactSpeedometer\r\n                    minValue={0}\r\n                    maxValue={70}\r\n                    needleHeightRatio={0.8}\r\n                    maxSegmentLabels={8}\r\n                    segments={5555}\r\n                    value={this.props.speedometer.speed}\r\n                    textColor={\"white\"}\r\n                    width={1000}\r\n                    height={450}\r\n                    needleTransition={\"easePolyIn\"}\r\n                    ringWidth={120}\r\n                    paddingVertical={150}\r\n                    valueTextFontSize={0}\r\n                    labelFontSize={50}\r\n                    paddingHorizontal={100}\r\n                />\r\n               </div>\r\n          </div>\r\n        );\r\n     }\r\n};\r\n\r\nexport default Speedometer;","import React from 'react';\nimport firebase from './firebase.js'\nimport './App.css';\n\n// HERE IS THE WEBSITE IM USING FOR THE GRAPH EXAMPLES SUPER HELPFUL\n// https://github.com/jerairrest/react-chartjs-2/blob/master/example/src/components/line.js\n// http://jerairrest.github.io/react-chartjs-2/\n\nimport Speed from './components/speed';\nimport Time from './components/time'\nimport Lap from './components/lap'\nimport Speedometer from './components/speedometer'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      latestTime: '',\n      latestTrial: '',\n      latestData: {},\n      battery: {},\n      driver: {},            \n      lap: {},\n      speed: {},\n      speedometer: {},\n      time: {},\n    };\n  }\n\n  componentDidMount() {\n    let database = firebase.database();\n\n    //sets the time\n    database.ref(\"Latest Time\").on('value', (snapshot) => {\n      var latestTime1 = snapshot.val();\n      { console.log(latestTime1) }\n      //sets the trial\n      database.ref(\"Latest Trial\").on('value', (snapshot) => {\n        var latestTrial1 = snapshot.val();\n        { console.log(latestTrial1) }\n\n        //sets the data\n        database.ref(latestTrial1).child(latestTime1).on('value', (snapshot) => {\n          var latestData1 = {};\n          latestData1 = snapshot.val();\n          var speed = latestData1[\"speed\"];\n          var lap = latestData1[\"lap\"];\n          var speedometer = latestData1[\"speed\"];\n\n          this.setState({\n            latestData: latestData1,\n            speed: speed,\n            speedometer: speed,\n            lap: lap,\n          })\n        });\n        \n        this.setState({\n          latestTrial: latestTrial1\n        })\n      });\n\n      this.setState({\n        latestTime: latestTime1\n      })\n    });\n  }\n  \n  render() {\n    return (\n      <div class=\"canvas color-dark\" style={{paddingTop: '45px'}}>\n        <div class=\"columns is-vcentered\">\n          <div class=\"column is-one-third\">   \n            <Speed speed={this.state.speed} />\n          </div>\n          <div class=\"column \">\n            {/* <Time time={this.state.time} /> */}\n            <Speedometer speedometer={this.state.speed}/>\n            <Lap lap={this.state.lap} />  \n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}