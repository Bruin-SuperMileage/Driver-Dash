{"version":3,"sources":["firebase.js","App.js","components/speed.js","components/lap.js","components/speedometer.js","serviceWorker.js","index.js"],"names":["config","apiKey","apiKeyHidden","authDomain","databaseURL","projectId","storageBucket","firebase","initializeApp","element","Speed","className","this","props","speed","React","Component","Lap","state","timerOn","timerStart","timerTime","isRunning","lapNumber","startTimer","setState","Date","now","timer","setInterval","stopTimer","clearInterval","resetTimer","componentDidMount","lap","componentDidUpdate","render","centiseconds","Math","floor","slice","seconds","minutes","fourptthree","fourptthreecentiseconds","fourptthreeseconds","fourptthreeminutes","bind","Speedometer","minValue","maxValue","needleHeightRatio","maxSegmentLabels","segments","value","speedometer","textColor","width","height","needleTransition","ringWidth","paddingVertical","valueTextFontSize","labelFontSize","paddingHorizontal","document","documentElement","requestFullScreen","mozRequestFullScreen","webkitRequestFullScreen","App","all","latestData","database","ref","on","snapshot","val","latestTime1","latestTrial1","child","latestData1","exists","console","log","style","paddingTop","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.953bce71.chunk.js","sourcesContent":["import {apiKeyHidden} from './config';\r\nimport firebase from 'firebase';\r\n\r\n// Set the configuration for your app\r\n// TODO: Replace with your project's config object\r\n\r\nvar config = {\r\n  // apiKey: \"AIzaSyAnFTWZTgWEugKOSUM6WY_NkxrPzRzn6dU\",\r\n  apiKey: apiKeyHidden,\r\n  authDomain: \"smv-daq.firebaseapp.com\",\r\n  databaseURL: \"https://smv-daq.firebaseio.com\",\r\n  projectId: \"smv-daq\",\r\n  storageBucket: \"bucket.appspot.com\"\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;","import React from 'react';\r\nimport firebase from './firebase.js'\r\nimport './App.css';\r\n\r\n// HERE IS THE WEBSITE IM USING FOR THE GRAPH EXAMPLES SUPER HELPFUL\r\n// https://github.com/jerairrest/react-chartjs-2/blob/master/example/src/components/line.js\r\n// http://jerairrest.github.io/react-chartjs-2/\r\n\r\nimport Speed from './components/speed';\r\nimport Lap from './components/lap'\r\nimport Speedometer from './components/speedometer'\r\n\r\nfunction launchFullScreen(element) {\r\n  if(element.requestFullScreen) {\r\n    element.requestFullScreen();\r\n  } else if(element.mozRequestFullScreen) {\r\n    element.mozRequestFullScreen();\r\n  } else if(element.webkitRequestFullScreen) {\r\n    element.webkitRequestFullScreen();\r\n  }\r\n}\r\n\r\n// Launch fullscreen for browsers that support it!\r\nlaunchFullScreen(document.documentElement); // the whole page\r\n\r\nclass App extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      all: {},\r\n      // latestTime: '',\r\n      // latestTrial: '',\r\n      latestData: {},\r\n      lap: {},\r\n      speed: {},\r\n      speedometer: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let database = firebase.database();\r\n    database.ref().on('value', (snapshot) => {\r\n      let all = snapshot.val();\r\n      this.setState({\r\n        all: all\r\n      })\r\n    });\r\n    database.ref(\"Previous Time\").on('value', (snapshot) => {\r\n      //console.log(\"Run\");\r\n      let latestTime1 = snapshot.val();\r\n      database.ref(\"Latest Trial\").on('value', (snapshot) => {\r\n        let latestTrial1 = snapshot.val();\r\n        database.ref(latestTrial1).child(latestTime1).on('value', (snapshot) => {\r\n          //console.log(latestTrial1 + \" \" + latestTime1)\r\n          let latestData1 = {};\r\n          let exists = snapshot.exists();\r\n          let speed;\r\n          if (exists === true) {\r\n            console.log(\"if\")\r\n            latestData1 = snapshot.val();\r\n            speed = latestData1[\"hall-effect\"];\r\n          }\r\n          else {\r\n            console.log(\"else\")\r\n            speed = 0;\r\n          }\r\n          this.setState({\r\n            latestData: latestData1,\r\n            speed: speed,\r\n            speedometer: speed,\r\n          })\r\n        });\r\n        \r\n        // this.setState({\r\n        //   latestTrial: latestTrial1\r\n        // })\r\n      });\r\n\r\n      // this.setState({\r\n      //   latestTime: latestTime1\r\n      // })\r\n    });\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"canvas color-dark\" style={{paddingTop: '45px'}}>\r\n        <div className=\"columns is-vcentered\">\r\n          <div className=\"column is-one-third\">   \r\n            <Speed speed={this.state.speed} />\r\n          </div>\r\n          <div className=\"column \">\r\n            <Speedometer speedometer={this.state.speed}/>\r\n            <Lap lap={this.state.all} />  \r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\n\r\nclass Speed extends React.Component{\r\n    render() {\r\n        return (\r\n          <div className=\"columns\">\r\n               <div className=\"column\">\r\n                    <p className = \"speed has-text-centered big\">{this.props.speed.speed}</p>\r\n                    <p className = \"speed has-text-centered km\">km/h</p>\r\n               </div>\r\n          </div>\r\n        );\r\n     }\r\n};\r\n\r\nexport default Speed;","import React from 'react';\r\n\r\nclass Lap extends React.Component{\r\n  constructor(props) {\r\n    super(props)\r\n    this.startTimer = this.startTimer.bind(this)\r\n    this.stopTimer = this.stopTimer.bind(this)\r\n    this.resetTimer = this.resetTimer.bind(this)\r\n  }\r\n  \r\n  state = {\r\n    timerOn: false,\r\n    timerStart: 0,\r\n    timerTime: 0,\r\n    isRunning: \"False\",\r\n    lapNumber: 1\r\n  };\r\n\r\n  startTimer = () => {\r\n    this.setState({\r\n      timerOn: true,\r\n      timerTime: this.state.timerTime,\r\n      timerStart: Date.now() - this.state.timerTime,\r\n      isRunning: \"True\"\r\n    });\r\n    this.timer = setInterval(() => {\r\n      this.setState({\r\n        timerTime: Date.now() - this.state.timerStart\r\n      });\r\n    }, 10);\r\n  };\r\n\r\n  stopTimer = () => {\r\n    this.setState({ \r\n      timerOn: false,\r\n      isRunning: \"False\"\r\n     });\r\n    clearInterval(this.timer);\r\n  };\r\n\r\n  resetTimer = () => {\r\n    this.setState({\r\n      timerStart: Date.now(),\r\n      timerTime: 0,\r\n    });\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    if (this.props.lap[\"Running\"] === \"True\") {\r\n      if (this.props.lap[\"Running\"] === \"True\") {\r\n        this.resetTimer();\r\n        this.startTimer();\r\n      }\r\n      else if (this.props.lap[\"Running\"] === \"False\") {\r\n        this.stopTimer();\r\n      }\r\n    }\r\n\r\n  };\r\n\r\n  componentDidUpdate = () => {\r\n    const {isRunning, lapNumber } = this.state;\r\n    if (isRunning !== this.props.lap[\"Running\"]) {\r\n      if (this.props.lap[\"Running\"] === \"True\") {\r\n        this.startTimer();\r\n        this.resetTimer();\r\n        this.setState({\r\n          isRunning: \"True\"\r\n        })\r\n      }\r\n      else if (this.props.lap[\"Running\"] === \"False\") {\r\n        this.stopTimer();\r\n        this.setState({\r\n          isRunning: \"False\"\r\n        })\r\n      }\r\n    }\r\n    if (lapNumber !== this.props.lap[\"Lap\"]) {\r\n      this.resetTimer();\r\n      this.setState({\r\n        lapNumber: this.props.lap[\"Lap\"]\r\n      })\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    const { timerTime } = this.state;\r\n    let centiseconds = (\"0\" + (Math.floor(timerTime / 10) % 100)).slice(-2);\r\n    let seconds = (\"0\" + (Math.floor(timerTime / 1000) % 60)).slice(-2);\r\n    let minutes = (\"0\" + (Math.floor(timerTime / 60000) % 60)).slice(-2);\r\n    const fourptthree = 260000 - timerTime;\r\n    let fourptthreecentiseconds = (\"0\" + (Math.floor(fourptthree / 10) % 100)).slice(-2);\r\n    let fourptthreeseconds = (\"0\" + (Math.floor(fourptthree / 1000) % 60)).slice(-2);\r\n    let fourptthreeminutes = (\"0\" + (Math.floor(fourptthree / 60000) % 60)).slice(-2);\r\n    return (\r\n      <div>\r\n        <div className=\"lap\">\r\n            <div className=\"card-content columns\">\r\n                <div className=\"column\">\r\n                  <p>Lap {this.props.lap[\"Lap\"]}</p>\r\n                  <p>Remaining</p>\r\n                </div>\r\n                <div className=\"column\">\r\n                  <p>{minutes} : {seconds} : {centiseconds}</p>\r\n                  <p>{fourptthreeminutes} : {fourptthreeseconds} : {fourptthreecentiseconds}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n};\r\n\r\n     \r\nexport default Lap;","import React from 'react';\r\nimport ReactSpeedometer from \"react-d3-speedometer\"\r\n\r\nclass Speedometer extends React.Component{\r\n    render() {\r\n        return (\r\n          <div className=\"columns\">\r\n               <div className=\"column has-text-centered\">\r\n                <ReactSpeedometer\r\n                    minValue={0}\r\n                    maxValue={70}\r\n                    needleHeightRatio={0.8}\r\n                    maxSegmentLabels={8}\r\n                    segments={5555}\r\n                    value={this.props.speedometer.speed}\r\n                    textColor={\"white\"}\r\n                    width={1000}\r\n                    height={450}\r\n                    needleTransition={\"easePolyIn\"}\r\n                    ringWidth={120}\r\n                    paddingVertical={150}\r\n                    valueTextFontSize={'0'}\r\n                    labelFontSize={'50'}\r\n                    paddingHorizontal={100}\r\n                />\r\n               </div>\r\n          </div>\r\n        );\r\n     }\r\n};\r\n\r\nexport default Speedometer;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}